import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Cadl.Rest;
using Cadl.Http;
using Azure.Core.Foundations;

@doc("Illustrates inheritance and polymorphic model.")
@scenarioService("/models/inheritance")
namespace Models.Inheritance;

@doc("This is base model for non-discriminator normal multiple levels inheritance.")
model Pet {
  name: string;
}

@doc("The second level model in the normal multiple levels inheritance.")
model Cat extends Pet {
  age: int32;
}

@doc("The third level model in the normal multiple levels inheritance.")
model Siamese extends Cat {
  smart: boolean;
}

@doc("This is base model for polymorphic multiple levels inheritance with a discriminator.")
@discriminator("kind")
model Fish {
  age: int32;
}

@doc("The second level model in polymorphic multiple levels inheritance and it defines a new discriminator.")
@discriminator("sharktype")
model Shark extends Fish {
  kind: "shark";
}

@doc("The second level model in polymorphic multiple levels inheritance which doesn't define new discriminator.")
model Salmon extends Fish {
  kind: "salmon";
  friends?: Fish[];
  hate?: Record<Fish>;
  partner?: Fish;
}

@doc("The third level model SawShark in polymorphic multiple levels inheritance.")
model SawShark extends Shark {
  sharktype: "saw";
}

@doc("The third level model GoblinShark in polymorphic multiple levels inheritance.")
model GoblinShark extends Shark {
  sharktype: "goblin";
}

@scenario
@scenarioDoc("Generate and send model. The valid input value is {\"name\": \"abc\", \"age\": 32, \"smart\": true}.")
@route("/valid")
@post
op postValid(@body input: Siamese): OkResponse | ErrorResponse;

@scenario
@scenarioDoc("Generate and receive model. The return value is {\"name\": \"abc\", \"age\": 32, \"smart\": true}.")
@route("/valid")
@get
op getValid(): Siamese | ErrorResponse;

@scenario
@scenarioDoc("Generate, send, and receive round-trip bottom model.")
@route("/valid")
@put
op putValid(@body input: Siamese): Siamese | ErrorResponse;

@scenario
@route("/polymorphism/valid")
@scenarioDoc("Generate and receive polymorphic model in multiple levels inheritance with 2 discriminators. The valid input is {\"age\": 1, \"kind\": \"shark\",  \"sharktype\": \"goblin\"}.")
@get
op getPolymorphicModel(): Fish | ErrorResponse;

@scenario
@route("/polymorphism/valid")
@scenarioDoc("Generate and send polymorphic model in multiple levels inheritance with 2 discriminators. The return value is {\"age\": 1, \"kind\": \"shark\",  \"sharktype\": \"goblin\"}.")
@put
op putPolymorphicModel(@body input: Fish): OkResponse | ErrorResponse;

@scenario
@route("/polymorphism/recursive")
@scenarioDoc("Generate, send, and receive round-trip models has collection and dictionary properties referring to models in three levels inheritance with 2 discriminator. The input and output is {\"age\":1,\"kind\":\"salmon\",\"partner\":{\"age\":2,\"kind\":\"shark\",\"sharktype\":\"saw\"},\"friends\":[{\"age\":2,\"kind\":\"salmon\",\"partner\":{\"age\":3,\"kind\":\"salmon\"},\"hate\":{\"key1\":{\"age\":4,\"kind\":\"salmon\"},\"key2\":{\"age\":2,\"kind\":\"shark\",\"sharktype\":\"goblin\"}}},{\"age\":3,\"kind\":\"shark\",\"sharktype\":\"goblin\"}],\"hate\":{\"key3\":{\"age\":3,\"kind\":\"shark\",\"sharktype\":\"saw\"},\"key4\":{\"age\":2,\"kind\":\"salmon\",\"friends\":[{\"age\":1,\"kind\":\"salmon\"},{\"age\":4,\"kind\":\"shark\",\"sharktype\":\"goblin\"}]}}}")
@put
op setPolymorphismRecursively(@body input: Fish): Fish | ErrorResponse;

@scenario
@route("/polymorphism/missingdiscriminator")
@scenarioDoc("Get a model omitting the discriminator.")
@get
op getPolymorphismMissingDiscriminator(): Fish | ErrorResponse;
