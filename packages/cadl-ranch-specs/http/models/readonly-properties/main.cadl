import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Cadl.Http;
using Azure.Core.Foundations;

@serviceTitle("ReadonlyPropertiesClient")
@serviceVersion("1.0.0")
@server("http://localhost:3000", "TestServer endpoint")
@doc("Illustrates models with readonly properties.")
@route("/readonly-properties")
namespace ReadonlyProperties;

// Note: input model with readonly properties doesn't make sense
// because input models are for setting values.

@doc("Readonly model")
model ReadonlyModel {
  @doc("Required string")
  requiredString: string;
}

@doc("Output model with readonly properties.")
model OutputModel {
  @doc("Required string, illustrating a readonly reference type property.")
  @visibility("read")
  requiredReadonlyString: string;

  @doc("Required int, illustrating a readonly value type property.")
  @visibility("read")
  requiredReadonlyInt: int32;

  @doc("Optional string, illustrating a readonly reference type property.")
  @visibility("read")
  optionalReadonlyString?: string;

  @doc("Optional int, illustrating a readonly value type property.")
  @visibility("read")
  optionalReadonlyInt?: int32;

  @doc("Required readonly model.")
  @visibility("read")
  requiredReadonlyModel: ReadonlyModel;

  @doc("Optional readonly model.")
  @visibility("read")
  optionalReadonlyModel?: ReadonlyModel;

  @doc("Required readonly string collection.")
  @visibility("read")
  requiredReadonlyStringList: string[];

  @doc("Required readonly int collection.")
  @visibility("read")
  requiredReadonlyIntList: int32[];

  @doc("Optional readonly string collection.")
  @visibility("read")
  optionalReadonlyStringList?: string[];

  @doc("Optional readonly int collection.")
  @visibility("read")
  optionalReadonlyIntList?: int32[];
}

@doc("Input model for setting values.")
model InputModel {
  @doc("Required input string name.")
  name: string;
}

@doc("Round-trip model with readonly properties from server, and non-readonly properties for sending to server.")
model RoundTripModel {
  ...OutputModel;
  ...InputModel;
}

@scenario
@scenarioDoc("""
Get a roundtrip model with readonly properties.
expected responseBody: {
  requiredReadonlyString: "requiredReadonlyStringValue",
  requiredReadonlyInt: 10,
  requiredReadonlyModel: {
    requiredString: "requiredStringValue",
  },
  requiredReadonlyStringList: ["value1", "value2"],
  requiredReadonlyIntList: [1, 2, 3, 4, 5],
}
""")
@route("/models")
@get
op getReadOnlyProperties(): RoundTripModel | ErrorResponse;

@scenario
@scenarioDoc("""
Send roundtrip model to server, and receive a new roundtrip model with both sent properties and readonly properties from server.
expected requestBody: {
  name: "foo"
}
expected responseBody: {
  name: "foo",
  requiredReadonlyString: "requiredReadonlyStringValue",
  requiredReadonlyInt: 10,
  requiredReadonlyModel: {
    requiredString: "requiredStringValue",
  },
  requiredReadonlyStringList: ["value1", "value2"],
  requiredReadonlyIntList: [1, 2, 3, 4, 5],
}
""")
@route("/models")
@put
op sendNonReadOnlyAndGetAllProperties(@body input: RoundTripModel): RoundTripModel | ErrorResponse;
