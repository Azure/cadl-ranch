# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class array_wrapper(_model_base.Model):
    """array_wrapper.

    :ivar array:
    :vartype array: list[str]
    """

    array: Optional[List[str]] = rest_field(name="array")

    @overload
    def __init__(
        self,
        *,
        array: Optional[List[str]] = None,
    ):
        """
        :keyword array:
        :paramtype array: list[str]
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class basic(_model_base.Model):
    """basic.

    :ivar id: Basic Id.
    :vartype id: int
    :ivar name: Name property with a very long description that does not fit on a single line and a
     line break.
    :vartype name: str
    :ivar color: Known values are: "cyan", "Magenta", "YELLOW", and "blacK".
    :vartype color: str or ~cadl.testserver.bodycomplex.models.CMYKColors
    """

    id: Optional[int] = rest_field(name="id")  # Basic Id.
    name: Optional[str] = rest_field(
        name="name"
    )  # Name property with a very long description that does not fit on a single line and a line break.
    color: Optional[Union[str, "CMYKColors"]] = rest_field(
        name="color"
    )  # Known values are: "cyan", "Magenta", "YELLOW", and "blacK".

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[Union[str, "_models.CMYKColors"]] = None,
    ):
        """
        :keyword id: Basic Id.
        :paramtype id: int
        :keyword name: Name property with a very long description that does not fit on a single line
         and a line break.
        :paramtype name: str
        :keyword color: Known values are: "cyan", "Magenta", "YELLOW", and "blacK".
        :paramtype color: str or ~cadl.testserver.bodycomplex.models.CMYKColors
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class boolean_wrapper(_model_base.Model):
    """boolean_wrapper.

    :ivar field_true:
    :vartype field_true: bool
    :ivar field_false:
    :vartype field_false: bool
    """

    field_true: Optional[bool] = rest_field(name="field_true")
    field_false: Optional[bool] = rest_field(name="field_false")

    @overload
    def __init__(
        self,
        *,
        field_true: Optional[bool] = None,
        field_false: Optional[bool] = None,
    ):
        """
        :keyword field_true:
        :paramtype field_true: bool
        :keyword field_false:
        :paramtype field_false: bool
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class byte_wrapper(_model_base.Model):
    """byte_wrapper.

    :ivar field:
    :vartype field: bytes
    """

    field: Optional[bytes] = rest_field(name="field")

    @overload
    def __init__(
        self,
        *,
        field: Optional[bytes] = None,
    ):
        """
        :keyword field:
        :paramtype field: bytes
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class pet(_model_base.Model):
    """pet.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    """

    id: Optional[int] = rest_field(name="id")
    name: Optional[str] = rest_field(name="name")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
    ):
        """
        :keyword id:
        :paramtype id: int
        :keyword name:
        :paramtype name: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class cat(pet):
    """cat.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar color:
    :vartype color: str
    :ivar hates:
    :vartype hates: list[~cadl.testserver.bodycomplex.models.dog]
    """

    color: Optional[str] = rest_field(name="color")
    hates: Optional[List["dog"]] = rest_field(name="hates")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[str] = None,
        hates: Optional[List["_models.dog"]] = None,
    ):
        """
        :keyword id:
        :paramtype id: int
        :keyword name:
        :paramtype name: str
        :keyword color:
        :paramtype color: str
        :keyword hates:
        :paramtype hates: list[~cadl.testserver.bodycomplex.models.dog]
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Fish(_model_base.Model):
    """Fish.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    salmon, shark, smart_salmon

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    """

    __mapping__ = {}
    species: Optional[str] = rest_field(name="species")
    length: float = rest_field(name="length")  # Required.
    siblings: Optional[List["Fish"]] = rest_field(name="siblings")
    fishtype: str = rest_discriminator(name="fishtype")  # Required. Default value is "shark".

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class shark(Fish, discriminator="shark"):
    """shark.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    cookiecuttershark, goblinshark, sawshark

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "cookiecuttershark".
    :vartype sharktype: str
    """

    __mapping__ = {}
    age: Optional[int] = rest_field(name="age")
    birthday: datetime.datetime = rest_field(name="birthday")  # Required.
    sharktype: str = rest_discriminator(name="sharktype")  # Required. Default value is "cookiecuttershark".

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword age:
        :paramtype age: int
        :keyword birthday: Required.
        :paramtype birthday: ~datetime.datetime
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "shark"  # type: str


class cookiecuttershark(shark, discriminator="cookiecuttershark"):
    """cookiecuttershark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "cookiecuttershark".
    :vartype sharktype: str
    """

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword age:
        :paramtype age: int
        :keyword birthday: Required.
        :paramtype birthday: ~datetime.datetime
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "cookiecuttershark"  # type: str


class date_wrapper(_model_base.Model):
    """date_wrapper.

    :ivar field:
    :vartype field: ~datetime.date
    :ivar leap:
    :vartype leap: ~datetime.date
    """

    field: Optional[datetime.date] = rest_field(name="field")
    leap: Optional[datetime.date] = rest_field(name="leap")

    @overload
    def __init__(
        self,
        *,
        field: Optional[datetime.date] = None,
        leap: Optional[datetime.date] = None,
    ):
        """
        :keyword field:
        :paramtype field: ~datetime.date
        :keyword leap:
        :paramtype leap: ~datetime.date
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class datetime_wrapper(_model_base.Model):
    """datetime_wrapper.

    :ivar field:
    :vartype field: ~datetime.datetime
    :ivar now:
    :vartype now: ~datetime.datetime
    """

    field: Optional[datetime.datetime] = rest_field(name="field")
    now: Optional[datetime.datetime] = rest_field(name="now")

    @overload
    def __init__(
        self,
        *,
        field: Optional[datetime.datetime] = None,
        now: Optional[datetime.datetime] = None,
    ):
        """
        :keyword field:
        :paramtype field: ~datetime.datetime
        :keyword now:
        :paramtype now: ~datetime.datetime
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class datetimerfc1123_wrapper(_model_base.Model):
    """datetimerfc1123_wrapper.

    :ivar field:
    :vartype field: ~datetime.datetime
    :ivar now:
    :vartype now: ~datetime.datetime
    """

    field: Optional[datetime.datetime] = rest_field(name="field")
    now: Optional[datetime.datetime] = rest_field(name="now")

    @overload
    def __init__(
        self,
        *,
        field: Optional[datetime.datetime] = None,
        now: Optional[datetime.datetime] = None,
    ):
        """
        :keyword field:
        :paramtype field: ~datetime.datetime
        :keyword now:
        :paramtype now: ~datetime.datetime
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class dictionary_wrapper(_model_base.Model):
    """dictionary_wrapper.

    :ivar default_program:
    :vartype default_program: dict[str, str]
    """

    default_program: Optional[Dict[str, str]] = rest_field(name="defaultProgram")

    @overload
    def __init__(
        self,
        *,
        default_program: Optional[Dict[str, str]] = None,
    ):
        """
        :keyword default_program:
        :paramtype default_program: dict[str, str]
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class dog(pet):
    """dog.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar food:
    :vartype food: str
    """

    food: Optional[str] = rest_field(name="food")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        food: Optional[str] = None,
    ):
        """
        :keyword id:
        :paramtype id: int
        :keyword name:
        :paramtype name: str
        :keyword food:
        :paramtype food: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotFish(_model_base.Model):
    """DotFish.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DotSalmon

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar fish_type: Required. Default value is "DotSalmon".
    :vartype fish_type: str
    """

    __mapping__ = {}
    species: Optional[str] = rest_field(name="species")
    fish_type: str = rest_discriminator(name="fish_type")  # Required. Default value is "DotSalmon".

    @overload
    def __init__(
        self,
        *,
        species: Optional[str] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotFishMarket(_model_base.Model):
    """DotFishMarket.

    All required parameters must be populated in order to send to Azure.

    :ivar sample_salmon:
    :vartype sample_salmon: ~cadl.testserver.bodycomplex.models.DotSalmon
    :ivar salmons:
    :vartype salmons: list[~cadl.testserver.bodycomplex.models.DotSalmon]
    :ivar sample_fish:
    :vartype sample_fish: ~cadl.testserver.bodycomplex.models.DotFish
    :ivar fishes: Required.
    :vartype fishes: list[~cadl.testserver.bodycomplex.models.DotFish]
    """

    sample_salmon: Optional["DotSalmon"] = rest_field(name="sampleSalmon")
    salmons: Optional[List["DotSalmon"]] = rest_field(name="salmons")
    sample_fish: Optional["DotFish"] = rest_field(name="sampleFish")
    fishes: List["DotFish"] = rest_field(name="fishes")  # Required.

    @overload
    def __init__(
        self,
        *,
        fishes: List["_models.DotFish"],
        sample_salmon: Optional["_models.DotSalmon"] = None,
        salmons: Optional[List["_models.DotSalmon"]] = None,
        sample_fish: Optional["_models.DotFish"] = None,
    ):
        """
        :keyword sample_salmon:
        :paramtype sample_salmon: ~cadl.testserver.bodycomplex.models.DotSalmon
        :keyword salmons:
        :paramtype salmons: list[~cadl.testserver.bodycomplex.models.DotSalmon]
        :keyword sample_fish:
        :paramtype sample_fish: ~cadl.testserver.bodycomplex.models.DotFish
        :keyword fishes: Required.
        :paramtype fishes: list[~cadl.testserver.bodycomplex.models.DotFish]
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotSalmon(DotFish, discriminator="DotSalmon"):
    """DotSalmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar fish_type: Required. Default value is "DotSalmon".
    :vartype fish_type: str
    :ivar location:
    :vartype location: str
    :ivar iswild:
    :vartype iswild: bool
    """

    location: Optional[str] = rest_field(name="location")
    iswild: Optional[bool] = rest_field(name="iswild")

    @overload
    def __init__(
        self,
        *,
        species: Optional[str] = None,
        location: Optional[str] = None,
        iswild: Optional[bool] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword location:
        :paramtype location: str
        :keyword iswild:
        :paramtype iswild: bool
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fish_type = "DotSalmon"  # type: str


class double_wrapper(_model_base.Model):
    """double_wrapper.

    :ivar field1:
    :vartype field1: float
    :ivar
     field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose:
    :vartype
     field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose:
     float
    """

    field1: Optional[float] = rest_field(name="field1")
    field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: Optional[
        float
    ] = rest_field(
        name="field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose"
    )

    @overload
    def __init__(
        self,
        *,
        field1: Optional[float] = None,
        field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: Optional[
            float
        ] = None,
    ):
        """
        :keyword field1:
        :paramtype field1: float
        :keyword
         field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose:
        :paramtype
         field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose:
         float
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class duration_wrapper(_model_base.Model):
    """duration_wrapper.

    :ivar field:
    :vartype field: ~datetime.timedelta
    """

    field: Optional[datetime.timedelta] = rest_field(name="field")

    @overload
    def __init__(
        self,
        *,
        field: Optional[datetime.timedelta] = None,
    ):
        """
        :keyword field:
        :paramtype field: ~datetime.timedelta
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """Error.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Required.
    :vartype status: int
    :ivar message: Required.
    :vartype message: str
    """

    status: int = rest_field(name="status")  # Required.
    message: str = rest_field(name="message")  # Required.

    @overload
    def __init__(
        self,
        *,
        status: int,
        message: str,
    ):
        """
        :keyword status: Required.
        :paramtype status: int
        :keyword message: Required.
        :paramtype message: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class float_wrapper(_model_base.Model):
    """float_wrapper.

    :ivar field1:
    :vartype field1: float
    :ivar field2:
    :vartype field2: float
    """

    field1: Optional[float] = rest_field(name="field1")
    field2: Optional[float] = rest_field(name="field2")

    @overload
    def __init__(
        self,
        *,
        field1: Optional[float] = None,
        field2: Optional[float] = None,
    ):
        """
        :keyword field1:
        :paramtype field1: float
        :keyword field2:
        :paramtype field2: float
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class goblinshark(shark, discriminator="goblin"):
    """goblinshark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "goblin".
    :vartype sharktype: str
    :ivar jawsize:
    :vartype jawsize: int
    :ivar color: Known values are: "pink", "gray", "brown", "RED", and "red".
    :vartype color: str or ~cadl.testserver.bodycomplex.models.GoblinSharkColor
    """

    jawsize: Optional[int] = rest_field(name="jawsize")
    color: Optional[Union[str, "GoblinSharkColor"]] = rest_field(
        name="color"
    )  # Known values are: "pink", "gray", "brown", "RED", and "red".

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
        jawsize: Optional[int] = None,
        color: Optional[Union[str, "_models.GoblinSharkColor"]] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword age:
        :paramtype age: int
        :keyword birthday: Required.
        :paramtype birthday: ~datetime.datetime
        :keyword jawsize:
        :paramtype jawsize: int
        :keyword color: Known values are: "pink", "gray", "brown", "RED", and "red".
        :paramtype color: str or ~cadl.testserver.bodycomplex.models.GoblinSharkColor
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "goblin"  # type: str


class int_wrapper(_model_base.Model):
    """int_wrapper.

    :ivar field1:
    :vartype field1: int
    :ivar field2:
    :vartype field2: int
    """

    field1: Optional[int] = rest_field(name="field1")
    field2: Optional[int] = rest_field(name="field2")

    @overload
    def __init__(
        self,
        *,
        field1: Optional[int] = None,
        field2: Optional[int] = None,
    ):
        """
        :keyword field1:
        :paramtype field1: int
        :keyword field2:
        :paramtype field2: int
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class long_wrapper(_model_base.Model):
    """long_wrapper.

    :ivar field1:
    :vartype field1: int
    :ivar field2:
    :vartype field2: int
    """

    field1: Optional[int] = rest_field(name="field1")
    field2: Optional[int] = rest_field(name="field2")

    @overload
    def __init__(
        self,
        *,
        field1: Optional[int] = None,
        field2: Optional[int] = None,
    ):
        """
        :keyword field1:
        :paramtype field1: int
        :keyword field2:
        :paramtype field2: int
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class MyBaseHelperType(_model_base.Model):
    """MyBaseHelperType.

    :ivar prop_b_h1:
    :vartype prop_b_h1: str
    """

    prop_b_h1: Optional[str] = rest_field(name="propBH1")

    @overload
    def __init__(
        self,
        *,
        prop_b_h1: Optional[str] = None,
    ):
        """
        :keyword prop_b_h1:
        :paramtype prop_b_h1: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class MyBaseType(_model_base.Model):
    """MyBaseType.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    MyDerivedType

    All required parameters must be populated in order to send to Azure.

    :ivar prop_b1:
    :vartype prop_b1: str
    :ivar helper:
    :vartype helper: ~cadl.testserver.bodycomplex.models.MyBaseHelperType
    :ivar kind: Required. Default value is "Kind1".
    :vartype kind: str
    """

    __mapping__ = {}
    prop_b1: Optional[str] = rest_field(name="propB1")
    helper: Optional["MyBaseHelperType"] = rest_field(name="helper")
    kind: str = rest_discriminator(name="kind")  # Required. Default value is "Kind1".

    @overload
    def __init__(
        self,
        *,
        prop_b1: Optional[str] = None,
        helper: Optional["_models.MyBaseHelperType"] = None,
    ):
        """
        :keyword prop_b1:
        :paramtype prop_b1: str
        :keyword helper:
        :paramtype helper: ~cadl.testserver.bodycomplex.models.MyBaseHelperType
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class MyDerivedType(MyBaseType, discriminator="Kind1"):
    """MyDerivedType.

    All required parameters must be populated in order to send to Azure.

    :ivar prop_b1:
    :vartype prop_b1: str
    :ivar helper:
    :vartype helper: ~cadl.testserver.bodycomplex.models.MyBaseHelperType
    :ivar kind: Required. Default value is "Kind1".
    :vartype kind: str
    :ivar prop_d1:
    :vartype prop_d1: str
    """

    prop_d1: Optional[str] = rest_field(name="propD1")

    @overload
    def __init__(
        self,
        *,
        prop_b1: Optional[str] = None,
        helper: Optional["_models.MyBaseHelperType"] = None,
        prop_d1: Optional[str] = None,
    ):
        """
        :keyword prop_b1:
        :paramtype prop_b1: str
        :keyword helper:
        :paramtype helper: ~cadl.testserver.bodycomplex.models.MyBaseHelperType
        :keyword prop_d1:
        :paramtype prop_d1: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.kind = "Kind1"  # type: str


class readonly_obj(_model_base.Model):
    """readonly_obj.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar size: Required.
    :vartype size: int
    """

    id: Optional[str] = rest_field(name="id", readonly=True)
    size: int = rest_field(name="size")  # Required.

    @overload
    def __init__(
        self,
        *,
        size: int,
    ):
        """
        :keyword size: Required.
        :paramtype size: int
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class salmon(Fish, discriminator="salmon"):
    """salmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "salmon".
    :vartype fishtype: str
    :ivar location:
    :vartype location: str
    :ivar iswild:
    :vartype iswild: bool
    """

    location: Optional[str] = rest_field(name="location")
    iswild: Optional[bool] = rest_field(name="iswild")

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        location: Optional[str] = None,
        iswild: Optional[bool] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword location:
        :paramtype location: str
        :keyword iswild:
        :paramtype iswild: bool
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "salmon"  # type: str


class sawshark(shark, discriminator="sawshark"):
    """sawshark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "sawshark".
    :vartype sharktype: str
    :ivar picture:
    :vartype picture: bytes
    """

    picture: Optional[bytes] = rest_field(name="picture")

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
        picture: Optional[bytes] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword age:
        :paramtype age: int
        :keyword birthday: Required.
        :paramtype birthday: ~datetime.datetime
        :keyword picture:
        :paramtype picture: bytes
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "sawshark"  # type: str


class siamese(cat):
    """siamese.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar color:
    :vartype color: str
    :ivar hates:
    :vartype hates: list[~cadl.testserver.bodycomplex.models.dog]
    :ivar breed:
    :vartype breed: str
    """

    breed: Optional[str] = rest_field(name="breed")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[str] = None,
        hates: Optional[List["_models.dog"]] = None,
        breed: Optional[str] = None,
    ):
        """
        :keyword id:
        :paramtype id: int
        :keyword name:
        :paramtype name: str
        :keyword color:
        :paramtype color: str
        :keyword hates:
        :paramtype hates: list[~cadl.testserver.bodycomplex.models.dog]
        :keyword breed:
        :paramtype breed: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class smart_salmon(Fish, discriminator="smart_salmon"):
    """smart_salmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
    :ivar fishtype: Required. Default value is "smart_salmon".
    :vartype fishtype: str
    :ivar college_degree:
    :vartype college_degree: str
    """

    college_degree: Optional[str] = rest_field(name="college_degree")

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        college_degree: Optional[str] = None,
    ):
        """
        :keyword species:
        :paramtype species: str
        :keyword length: Required.
        :paramtype length: float
        :keyword siblings:
        :paramtype siblings: list[~cadl.testserver.bodycomplex.models.Fish]
        :keyword college_degree:
        :paramtype college_degree: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "smart_salmon"  # type: str


class string_wrapper(_model_base.Model):
    """string_wrapper.

    :ivar field:
    :vartype field: str
    :ivar empty:
    :vartype empty: str
    :ivar null:
    :vartype null: str
    """

    field: Optional[str] = rest_field(name="field")
    empty: Optional[str] = rest_field(name="empty")
    null: Optional[str] = rest_field(name="null")

    @overload
    def __init__(
        self,
        *,
        field: Optional[str] = None,
        empty: Optional[str] = None,
        null: Optional[str] = None,
    ):
        """
        :keyword field:
        :paramtype field: str
        :keyword empty:
        :paramtype empty: str
        :keyword null:
        :paramtype null: str
        """
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
