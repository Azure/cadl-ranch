import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Cadl.Rest;
using Cadl.Http;
using Azure.Core.Foundations;

@serviceTitle("Polymorphism in Complex Test Service")
@serviceVersion("2016-02-29")
@server("http://localhost:3000", "Testserver endpoint")
@doc("Illustrates complex model generation, as well as serialization and deserialization.")
namespace Cadl.Testserver.BodyComplexPolymorphism;

@knownValues(CMYKColorsValues)
model CMYKColors is string;

enum CMYKColorsValues {
  cyan,
  Magenta,
  YELLOW,
  blacK,
}

model basic {
  @doc("Basic Id")
  id?: int32;

  @doc("Name property with a very long description that does not fit on a single line and a line break.")
  name?: string;
  color?: CMYKColors;
}

model pet {
  id?: int32;
  name?: string;
}

model cat extends pet {
  color?: string;
  hates?: dog[];
}

model siamese extends cat {
  breed?: string;
}

model dog extends pet {
  food?: string;
}

@discriminator("fish_type")
model DotFish {
  species?: string;
}

model DotSalmon extends DotFish {
  fish_type: "DotSalmon";
  location?: string;
  iswild?: boolean;
}

model DotFishMarket {
  sampleSalmon?: DotSalmon;
  salmons?: DotSalmon[];
  sampleFish?: DotFish;
  fishes: DotFish[];
}

@discriminator("fishtype")
model Fish {
  species?: string;
  length: float32;
  siblings?: Fish[];
}

model salmon extends Fish {
  fishtype: "salmon";
  location?: string;
  iswild?: boolean;
}

model smart_salmon extends Fish {
  fishtype: "smart_salmon";
  college_degree?: string;
}

@discriminator("sharktype")
model shark extends Fish {
  fishtype: "shark";
  age?: int32;
  birthday: zonedDateTime;
}

model sawshark extends shark {
  sharktype: "sawshark";
  picture?: bytes;
}

@doc("Colors possible")
@knownValues(GoblinSharkColorValues)
model GoblinSharkColor is string;

enum GoblinSharkColorValues {
  pink,
  gray,
  brown,

  @doc("Uppercase RED")
  upperRed: "RED",

  @doc("Lowercase RED")
  lowerRed: "red",
}

model goblinshark extends shark {
  sharktype: "goblin";
  jawsize?: int32;
  color?: GoblinSharkColor = "gray";
}

model cookiecuttershark extends shark {
  sharktype: "cookiecuttershark";
}

@scenario
@route("/complex/basic")
namespace basicOps {
  @route("/valid")
  @scenarioDoc("Please put {id: 2, name: 'abc', color: 'Magenta'}")
  @put
  op putValid(@header "api-version": string, @body complexBody: basic): OkResponse | ErrorResponse;

  @route("/valid")
  @scenarioDoc("Get complex type {id: 2, name: 'abc', color: 'YELLOW'}")
  @get
  op getValid(): basic | ErrorResponse;

  @route("/invalid")
  @scenarioDoc("Get a basic complex type that is invalid for the local strong type")
  @get
  op getInvalid(): basic | ErrorResponse;

  @route("/empty")
  @scenarioDoc("Get a basic complex type that is empty")
  @get
  op getEmpty(): basic | ErrorResponse;

  @route("/null")
  @scenarioDoc("Get a basic complex type whose properties are null")
  @get
  op getNull(): basic | ErrorResponse;

  @route("/notprovided")
  @scenarioDoc("Get a basic complex type whose properties are null")
  @get
  op getNotProvided(): basic | ErrorResponse;
}

@scenario
@route("/complex/inheritance/valid")
namespace inheritance {
  @scenarioDoc("Put complex types that extend others")
  @put
  op putValid(
    @doc("Please put a siamese with id=2, name=\"Siameee\", color=green, breed=persion, which hates 2 dogs, the 1st one named \"Potato\" with id=1 and food=\"tomato\", and the 2nd one named \"Tomato\" with id=-1 and food=\"french fries\".")
    @body
    complexBody: siamese
  ): OkResponse | ErrorResponse;

  @scenarioDoc("Get complex types that extend others")
  @get
  op getValid(): siamese | ErrorResponse;
}

@scenario
@route("/complex/polymorphism")
namespace polymorphism {
  @route("/valid")
  @scenarioDoc("Put complex types that are polymorphic")
  @put
  op putValid(
    @doc("Please put a salmon that looks like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };")
    @body
    complexBody: Fish
  ): OkResponse | ErrorResponse;

  @route("/complicated")
  @scenarioDoc("Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties")
  @put
  op putComplicated(@body complexBody: Fish): OkResponse | ErrorResponse;

  @route("/missingdiscriminator")
  @scenarioDoc("Put complex types that are polymorphic, omitting the discriminator")
  @put
  op putMissingDiscriminator(@body complexBody: salmon): salmon | ErrorResponse;

  @route("/missingrequired/invalid")
  @scenarioDoc("Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client")
  @put
  op putValidMissingRequired(
    @doc("Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:\n{\n    \"fishtype\": \"sawshark\",\n    \"species\": \"snaggle toothed\",\n    \"length\": 18.5,\n    \"age\": 2,\n    \"birthday\": \"2013-06-01T01:00:00Z\",\n    \"location\": \"alaska\",\n    \"picture\": base64(FF FF FF FF FE),\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"birthday\": \"2012-01-05T01:00:00Z\",\n            \"length\": 20,\n            \"age\": 6\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"picture\": base64(FF FF FF FF FE),\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}")
    @body
    complexBody: Fish
  ): OkResponse | ErrorResponse;

  @route("/valid")
  @scenarioDoc("Get complex types that are polymorphic")
  @get
  op getValid(): Fish | ErrorResponse;

  @route("/dotsyntax")
  @scenarioDoc("Get complex types that are polymorphic, JSON key contains a dot")
  @get
  op getDotSyntax(): DotFish | ErrorResponse;

  @route("/composedWithDiscriminator")
  @scenarioDoc("Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.")
  @get
  op getComposedWithDiscriminator(): DotFishMarket | ErrorResponse;

  @route("/composedWithoutDiscriminator")
  @scenarioDoc("Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.")
  @get
  op getComposedWithoutDiscriminator(): DotFishMarket | ErrorResponse;

  @route("/complicated")
  @scenarioDoc("Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties")
  @get
  op getComplicated(): Fish | ErrorResponse;
}

@scenario
@route("/complex/polymorphicrecursive/valid")
namespace polymorphicrecursive {
  @scenarioDoc("Put complex types that are polymorphic and have recursive references")
  @put
  op putValid(
    @doc("Please put a salmon that looks like this:\n{\n    \"fishtype\": \"salmon\",\n    \"species\": \"king\",\n    \"length\": 1,\n    \"age\": 1,\n    \"location\": \"alaska\",\n    \"iswild\": true,\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"length\": 20,\n            \"age\": 6,\n            \"siblings\": [\n                {\n                    \"fishtype\": \"salmon\",\n                    \"species\": \"coho\",\n                    \"length\": 2,\n                    \"age\": 2,\n                    \"location\": \"atlantic\",\n                    \"iswild\": true,\n                    \"siblings\": [\n                        {\n                            \"fishtype\": \"shark\",\n                            \"species\": \"predator\",\n                            \"length\": 20,\n                            \"age\": 6\n                        },\n                        {\n                            \"fishtype\": \"sawshark\",\n                            \"species\": \"dangerous\",\n                            \"length\": 10,\n                            \"age\": 105\n                        }\n                    ]\n                },\n                {\n                    \"fishtype\": \"sawshark\",\n                    \"species\": \"dangerous\",\n                    \"length\": 10,\n                    \"age\": 105\n                }\n            ]\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}")
    @body
    complexBody: Fish
  ): OkResponse | ErrorResponse;

  @scenarioDoc("Get complex types that are polymorphic and have recursive references")
  @get
  op getValid(): Fish | ErrorResponse;
}
