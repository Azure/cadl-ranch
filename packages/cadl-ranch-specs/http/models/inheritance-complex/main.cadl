import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Cadl.Rest;
using Cadl.Http;
using Azure.Core.Foundations;

@serviceTitle("ComplexInheritanceClient")
@serviceVersion("1.0.0")
@server("http://localhost:3000", "Testserver endpoint")
@doc("Illustrates complex polymorphic model.")
@route("/inheritance-complex")
namespace Model.Inheritance;

@doc("Base model for non-discriminator three levels inheritance.")
model Pet {
  name?: string;
}

@doc("The second level model A in the non-discriminator three levels inheritance.")
model Cat extends Pet {
  age?: int32;
}

@doc("The third level model A in the non-discriminator three levels inheritance.")
model Siamese extends Cat {
  smart?: boolean;
}

@doc("Base model for three levels inheritance with discriminator.")
@discriminator("kind")
model Fish {
  age?: int32;
}

@doc("The second level model in three levels inheritance with discriminator and defined a new discriminator.")
@discriminator("sharktype")
model Shark extends Fish {
  kind: "shark";
}

@doc("The second level model in three levels inheritance with discriminator.")
model Salmon extends Fish {
  kind: "salmon";
  friends?: Fish[];
  hate?: Record<Fish>;
  partner?: Fish;
}

@doc("The third level model A in the three levels inheritance with discriminators.")
model SawShark extends Shark {
  sharktype: "saw";
}

@doc("The third level model B in the non-discriminator three levels inheritance with discriminators.")
model GoblinShark extends Shark {
  sharktype: "goblin";
}

@scenario
@scenarioDoc("Generate and send model. The valid input value is {name: \"abc\", age: 32, smart: true}")
@route("/inheritance/valid")
@post
op sendBottomModel(@body input: Siamese): OkResponse | ErrorResponse;

@scenario
@scenarioDoc("Generate and receive model. The return value is {name: \"abc\", age: 32, smart: true}")
@route("/inheritance/valid")
@get
op getBottomModel(): Siamese | ErrorResponse;

@scenario
@scenarioDoc("Generate, send, and receive round-trip bottom model.")
@route("/inheritance/valid")
@put
op setBottomModel(@body input: Siamese): Siamese | ErrorResponse;

@scenario
@route("inheritance/invalid")
@scenarioDoc("Get a basic model that is invalid for the local strong kind.")
@get
op getInvalidBaseModel(): Pet | ErrorResponse;

@scenario
@scenarioDoc("Generate, send, and receive round-trip model that optional property is not presented.")
@route("inheritance/empty")
@put
op setEmptyBaseModel(@body input: Siamese): Pet | ErrorResponse;

@scenario
@scenarioDoc("Get a basic model that optional property is sent as null.")
@route("inheritance/null")
@get
op getBaseModelWithNullProperty(): Pet | ErrorResponse;

@scenario
@route("/polymorphism/valid")
@scenarioDoc("Generate, send, and receive round-trip models in three levels inheritance with 2 discriminators. The valid input is  { age: 1, kind: \"shark\",  sharktype: \"goblin\"}")
@put
op setBaseModelWithDiscriminator(@body input: Fish): Fish | ErrorResponse;

@scenario
@route("/polymorphism/recursive")
@scenarioDoc("Generate, send, and receive round-trip models has collection and dictionary properties referring to models in three levels inheritance with 2 discriminator")
@put
op setRecursiveModel(@body input: Salmon): Salmon | ErrorResponse;

@scenario
@route("/polymorphism/missingdiscriminator")
@scenarioDoc("Get a model omitting the discriminator")
@get
op getBaseModelMissingDiscriminator(): Fish | ErrorResponse;
