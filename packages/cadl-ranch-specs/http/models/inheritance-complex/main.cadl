import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Cadl.Rest;
using Cadl.Http;
using Azure.Core.Foundations;

@serviceTitle("ComplexInheritanceClient")
@serviceVersion("1.0.0")
@server("http://localhost:3000", "Testserver endpoint")
@doc("Illustrates complex polymorphic model.")
@route("/inheritance-complex")
namespace Cadl.Testserver.ComplexInheritanceModels;

@doc("Base model for non-discriminator three levels inheritance.")
model BaseModel {
  optionalString?: string;
}

@doc("The second level model A in the non-discriminator three levels inheritance.")
model DerivedFromBaseModel extends BaseModel {
  optionalInt?: int32;
}

@doc("The third level model A in the non-discriminator three levels inheritance.")
model BottomModel extends DerivedFromBaseModel {
  optionalBool?: bool;
}


@doc("Base model for three levels inheritance with discriminator.")
@discriminator("discriminator1")
model BaseModelWithDiscriminator {
  optionalInt?: int32;
}

@doc("The second level model in three levels inheritance with discriminator and defined a new discriminator.")
@discriminator("discriminator2")
model SubModelWithDiscriminator extends BaseModelWithDiscriminator {
  discriminator1: "SubModel";
}

@doc("The second level model in three levels inheritance with discriminator.")
model DerivedFromBaseModelWithDiscriminator extends BaseModelWithDiscriminator {
  discriminator1: "Derived";
  optionalBaseCollection?: BaseModelWithDiscriminator[];
  optionalBaseDictionary?: Record<BaseModelWithDiscriminator>;
  optionalBase?: BaseModelWithDiscriminator;
}

@doc("The third level model A in the three levels inheritance with discriminators.")
model BottomModelWithDiscriminatorA extends SubModelWithDiscriminator {
  discriminator2: "BottomA";
}

@doc("The third level model B in the non-discriminator three levels inheritance with discriminators.")
model BottomModelWithDiscriminatorB extends SubModelWithDiscriminator {
  discriminator2: "BottomB";
}


@scenario
@scenarioDoc("Generate and send input BottomModel. The valid input value is {optionalString: \"abc\", optionalInt: 32, optionalBool: true}")
@route("/inheritance/valid")
@post
op sendBottomModel(@body input: BottomModel): OkResponse | ErrorResponse;

@scenario
@scenarioDoc("Generate and receive output BottomModel. The return value is {optionalString: \"abc\", optionalInt: 32, optionalBool: true}")
@route("/inheritance/valid")
@get
op getBottomModel(): BottomModel | ErrorResponse;

@scenario
@scenarioDoc("Generate, send, and receive round-trip bottom model.")
@route("/inheritance/valid")
@put
op setBottomModel(@body input: BottomModel): BottomModel | ErrorResponse;


@route("inheritance/invalid")
@scenarioDoc("Get a basic model that is invalid for the local strong type.")
@get
op getInvalidBaseModel(): BaseModel | ErrorResponse;

@scenario
@scenarioDoc("Generate, send, and receive round-trip BaseModel that optional propertu is not presented.")
@route("inheritance/empty")
@put
op setEmptyBaseModel(): BaseModel | ErrorResponse;

@scenario
@scenarioDoc("Get a basic model that optional property is sent as null.")
@route("inheritance/null")
@get
op getBaseModelWithNullProperty(): BaseModel | ErrorResponse;


@scenario
@route("/polymorphism/valid")
@scenarioDoc("Generate, send, and receive round-trip models in three levels inheritance with 2 discriminators. The valid input is  { optionalInt: 1, discriminator1: \"SubModel\",  discriminator2: \"BottomB\"}")
@put
op setBaseModelWithDiscriminator(@body input: BaseModelWithDiscriminator): BaseModelWithDiscriminator | ErrorResponse;


@scenario
@route("/polymorphism/recursive")
@scenarioDoc("Generate, send, and receive round-trip models has collection and dictionary properties referring to models in three levels inheritance with 2 discriminator")
@put
op setRecursiveModel(@body input: DerivedFromBaseModelWithDiscriminator): DerivedFromBaseModelWithDiscriminator | ErrorResponse;

@scenario
@route("/polymorphism/missingdiscriminator")
@scenarioDoc("Get a BaseModel omitting the discriminator")
@get
op getBaseModelMissingDiscriminator(): BaseModelWithDiscriminator | ErrorResponse;

