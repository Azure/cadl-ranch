import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-ranch-expect";

using Azure.Core;

@doc("DPG Swagger that tests our ability to grow up.")
@scenarioService("/resiliency/devdriven")
namespace Resiliency.DevDriven;
using Cadl.Http;
using Cadl.Rest;

@doc("The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model' if you are going to convert the raw body to a customized body before returning to users.")
model ModeParameter {
  @doc("The mode with which you'll be handling your returned body. 'raw' for just dealing with the raw body, and 'model' if you are going to convert the raw body to a customized body before returning to users.")
  @path
  mode: Mode;
}

enum Mode {
  "raw",
  "model",
}

@doc("Product resource")
@resource("products")
model Product {
  @doc("key of product")
  @key
  key: string;

  @doc("received mode")
  received: Mode;
}

@resource("productmodels")
model ProductModel {
  @key key: string;
  received: Mode;
}

@doc("Returns {'received': <mode>}")
model ProductResponse {
  @doc("Status code of response")
  @statusCode
  statusCode: 200;

  @doc("Actual product")
  @body
  body: Product;
}

@doc("Input to LRO call")
model Input {
  @doc("property on the input")
  hello: string;
}

@doc("Final response from LRO call")
model LroProduct extends Product {
  @doc("Provisioning state returned by the service")
  provisioningState: string;
}

@doc("Initial response with ProvisioningState='Succeeded'")
model LroProductResponse {
  @doc("Status code for LRO response")
  @statusCode
  statusCode: 200;

  @doc("Body of LRO response")
  @body
  body: LroProduct;
}

#suppress "@azure-tools/cadl-azure-core/use-standard-operations" "For testing"
@scenario
@scenarioDoc("""
Show that you can support both protocol methods and convenience method for a HTTP GET.
This method requires to write 2 tests.
- Test 1 is a call with "raw" and confirm you can read a JSON `{"received": "raw"}`
- Test 2 varies:
  - With DPG 1.0, write your own model to parse `{"received": "model"}`
  - With DPG 2.0, generate the convenience method to read Product model with "received" to "model"
""")
@route("/model/{mode}")
@doc("Get models that you will either return to end users as a raw body, or with a model added during grow up.")
@get
op getModel(...ModeParameter): ProductResponse;

#suppress "@azure-tools/cadl-azure-core/use-standard-operations" "For testing"
@scenario
@scenarioDoc("""
Show that you can support both protocol methods and convenience method for a HTTP POST.
This method requires to write 2 tests.
- Test 1 is a call with "raw" with body `{"hello": "world!"}` and confirm you can read a JSON `{"received": "raw"}`
- Test 2 varies:
  - With DPG 1.0, write a model Input("world!"), serialize to input write your own model to parse `{"received": "model"}`
  - With DPG 2.0, generate the convenience method to pass Input("world!") and read Product model with "received" to "model"
""")
@scenario
@route("/model/{mode}")
@doc("Post either raw response as a model and pass in 'raw' for mode, or grow up your operation to take a model instead, and put in 'model' as mode. ")
@post
op postModel(
  ...ModeParameter,

  @doc("Please put {'hello': 'world!'}")
  @body
  input: Input
): ProductResponse;

@scenario
@scenarioDoc("""
Show that you can support protocol methods for a Paging operation.
Confirm you can read a JSON `{"received": "raw"}` on page 2.
""")
@doc("Get raw pages.")
op getRawPages is ResourceList<Product>;

@scenario
@scenarioDoc("""
Show that you can support both protocol methods and convenience method for a Paging operation.
This method requires to write 2 tests.
- With DPG 1.0, iterate to page 2 and write your own model to parse `{"received": "model"}`
- With DPG 2.0, generate the convenience method to read Product model with "received" to "model" on page 2
""")
@doc("Get pages that you will either return to users in pages of raw bodies, or pages of models following group.")
op getModelPages is ResourceList<ProductModel>;

#suppress "@azure-tools/cadl-azure-core/use-standard-operations" "For testing"
// Make me LRO https://github.com/Azure/cadl-azure/issues/1656
@scenario
@scenarioDoc("""
Show that you can support both protocol methods and convenience method for a LRO.
This method requires to write 2 tests.
- Test 1 is a call with "raw" and confirm you can read a JSON `{"received": "raw"}` as final result.
- Test 2 varies:
  - With DPG 1.0, poll to final state and write your own model to parse `{"received": "model"}`
  - With DPG 2.0, generate the convenience method to poll a Product model with "received" to "model"
""")
@route("/lro/{mode}")
@doc("Long running put request that will either return to end users a final payload of a raw body, or a final payload of a model after the SDK has grown up.")
@pollingOperation
@put
op lro(...ModeParameter): LroProductResponse;
